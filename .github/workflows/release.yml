name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'scripts/setup-helm-repo.sh'
      - '.github/workflows/test.yml'
      - '.github/workflows/lint-helm-chart.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (leave empty for auto CalVer)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Generate CalVer version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: $VERSION"
          else
            VERSION=$(./scripts/generate-version.sh)
            echo "Generated CalVer version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "::error::Tag v${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

      - name: Update Helm Chart version
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Update chart version and appVersion
          sed -i "s/^version: .*/version: ${VERSION}/" helm/k8s-simple-logs/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"${VERSION}\"/" helm/k8s-simple-logs/Chart.yaml

          # Update default image tag in values.yaml
          sed -i "s/tag: \"latest\"/tag: \"${VERSION}\"/" helm/k8s-simple-logs/values.yaml

          echo "Updated Helm chart to version $VERSION"
          cat helm/k8s-simple-logs/Chart.yaml

      - name: Build Go binary
        run: |
          go build -o k8s-simple-logs \
            -ldflags "-X main.Version=${{ steps.version.outputs.version }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            docker.io/derf/k8s-simple-logs:${{ steps.version.outputs.version }}
            docker.io/derf/k8s-simple-logs:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Package Helm chart
        run: |
          helm package helm/k8s-simple-logs -d .deploy

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Commit version updates
        run: |
          git add helm/k8s-simple-logs/Chart.yaml helm/k8s-simple-logs/values.yaml
          git commit -m "Release v${{ steps.version.outputs.version }}" || echo "No changes to commit"

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" \
            -m "Release v${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Push version updates to main
        run: |
          git push origin main || echo "No commits to push"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          generate_release_notes: true
          files: |
            .deploy/k8s-simple-logs-${{ steps.version.outputs.version }}.tgz
            k8s-simple-logs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm repository index
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Checkout gh-pages branch
          git fetch origin gh-pages:gh-pages || echo "gh-pages doesn't exist yet"
          git checkout gh-pages || git checkout --orphan gh-pages

          # Install helm if not already available
          if ! command -v helm &> /dev/null; then
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi

          # Download the chart package from the release
          CHART_URL="https://github.com/fredsmith/k8s-simple-logs/releases/download/v${VERSION}/k8s-simple-logs-${VERSION}.tgz"
          mkdir -p charts
          curl -L -o "charts/k8s-simple-logs-${VERSION}.tgz" "$CHART_URL" || echo "Chart not yet in release, will be added in next run"

          # Generate/update index.yaml pointing to charts/ subdirectory
          helm repo index charts --url https://fredsmith.github.io/k8s-simple-logs/charts --merge index.yaml || helm repo index charts --url https://fredsmith.github.io/k8s-simple-logs/charts

          # Move index.yaml to root for GitHub Pages
          mv charts/index.yaml . || echo "Index already in root"

          # Commit and push index
          git add index.yaml charts/ || true
          git commit -m "Update Helm repository index for v${VERSION}" || echo "No index changes"
          git push origin gh-pages

      - name: Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          # Release v${{ steps.version.outputs.version }}

          ## Artifacts Published

          - 🐳 **Docker Image**: \`docker.io/derf/k8s-simple-logs:${{ steps.version.outputs.version }}\`
          - 📦 **Helm Chart**: \`k8s-simple-logs-${{ steps.version.outputs.version }}.tgz\`
          - 🏷️ **Git Tag**: \`v${{ steps.version.outputs.version }}\`

          ## Installation

          \`\`\`bash
          # Helm (from repository)
          helm repo update
          helm upgrade --install my-release k8s-simple-logs/k8s-simple-logs --version ${{ steps.version.outputs.version }}

          # Docker
          docker pull docker.io/derf/k8s-simple-logs:${{ steps.version.outputs.version }}
          \`\`\`

          ## Next Steps

          - ✅ Docker image pushed to Docker Hub
          - ✅ Helm chart packaged and released
          - ✅ GitHub Release created
          - ✅ Helm repository index updated
          EOF
